{% extends "commerce/_layouts/settingscp" %}

{% set crumbs = [
{ label: "Commerce Settings"|t, url: url('commerce/settings') },
{ label: "Tax Rates"|t, url: url('commerce/settings/taxrates') },
] %}

{% set fullPageForm = true %}


{% macro lazyCreateSelect(selectParams, newOptionLabel, modalHeading, html, js, action, successText) %}

    {% from "_includes/forms" import selectField %}
    {{ selectField(selectParams) }}

    {% includejs %}
        (function() {
            var $select = $('#{{ selectParams.id }}').selectize({
                dropdownParent: 'body'
            });

            var selectize = $select.get(0).selectize;

            selectize.addOption({
                value: 'new',
                text: '{{ newOptionLabel|e("js") }}'
            });

            selectize.on('item_add', function(value, $item) {
                if (value == 'new') {
                    // Not a real option
                    selectize.clear();

                    var $form = $(
                        '<form class="modal fitted lazy-create-modal">' +
                            '<div class="header">' +
                                '<h1 class="centeralign">{{ modalHeading }}</h1>' +
                            '</div>' +
                            '<div class="body">' +
                                '{{ html|e("js") }}' +
                            '</div>' +
                            '<div class="footer">' +
                                '<div class="buttons right">' +
                                    '<div class="btn cancel-btn">{{ "Cancel"|t }}</div>' +
                                    '<input type="submit" class="btn submit" value="{{ 'Save'|t }}"/>' +
                                    '<div class="spinner hidden"/>' +
                                '</div>' +
                            '</div>' +
                        '</form>'
                    );

                    var modal = new Garnish.Modal($form, {
                        onHide: function() {
                            modal.destroy();
                            delete modal;
                        }
                    });

                    eval('{{ js|e("js") }}');

                    setTimeout(function() {
                        $form.find('.text:first').focus();

                        modal.updateSizeAndPosition();
                        $form.find('.body:first').on('resize', function() {
                            modal.updateSizeAndPosition();
                        });
                    }, 100);

                    $form.on('submit', function(ev) {
                        ev.preventDefault();
                        $form.find('.spinner').removeClass('hidden');
                        var namespacedData = Garnish.getPostData($form),
                            data = {};

                        for (var name in namespacedData) {
                            data[name.replace(/^new\[([^\]]+)\]/, '$1')] = namespacedData[name];
                        }

                        Craft.postActionRequest('{{ action|e("js") }}', data, function(response, textStatus) {
                            $form.find('.spinner').addClass('hidden');
                            if (textStatus == 'success') {
                                if (response.success) {
                                    Craft.cp.displayNotice('{{ successText|e("js") }}');
                                    selectize.addOption({
                                        value: response.id,
                                        text: response.name,
                                        $order: selectize.order - 1
                                    });
                                    selectize.setValue(response.id);
                                    modal.hide();
                                } else {
                                    Craft.ui.clearErrorsFromField($form.find('.field'));

                                    for (var attribute in response.errors) {
                                        Craft.ui.addErrorsToField($('#new-'+attribute+'-field'), response.errors[attribute]);
                                    }

                                    modal.updateSizeAndPosition();
                                    Garnish.shake($form);
                                }
                            }
                        });
                    });

                    $form.find('.cancel-btn').on('click', function() {
                        modal.hide();
                    });
                }
            });
        })();
    {% endincludejs %}

{% endmacro %}


{% import "_includes/forms" as forms %}
{% from _self import lazyCreateSelect %}


{% block content %}
    <input type="hidden" name="action" value="commerce/taxRates/save">
    <input type="hidden" name="redirect" value="commerce/settings/taxrates">
    {% if taxRate.id %}<input type="hidden" name="taxRateId" value="{{ taxRate.id }}">{% endif %}

    {{ forms.textField({
        first: true,
        label: "Name"|t,
        instructions: "What this tax rate will be called in the CP."|t,
        name: 'name',
        value: taxRate.name,
        errors: taxRate.getErrors('name'),
        autofocus: true,
        required: true,
        translatable: true
    }) }}

    {{ forms.selectField({
        label: 'Taxable Subject'|t,
        instructions: "What this tax rate should apply to."|t,
        id: 'taxable',
        name: 'taxable',
        options: taxables,
        value: taxRate.taxable,
    }) }}

    {{ forms.textField({
        label: "Rate"|t,
        instructions: "Tax rates are a percentages, (i.e. if the tax rate is 5% then enter ‘5%’. You could also enter ‘10.5%’)."|t,
        name: 'rate',
        value: taxRate.rateAsPercent,
        errors: taxRate.getErrors('rate'),
        required: true,
    }) }}

    {% set taxZoneSelectParams = {
        label: "Tax Zone"|t,
        instructions: "Select a tax zone."|t,
        id: 'taxZoneId',
        name: 'taxZoneId',
        value: taxRate.taxZoneId,
        errors: taxRate.getErrors('taxZoneId'),
        required: true,
        options: taxZones,
        class: 'selectize fullwidth',
    } %}

    {{ lazyCreateSelect(
        taxZoneSelectParams,
        'New tax zone'|t,
        'Create a new tax zone'|t,
        newTaxZoneFields,
        newTaxZoneJs,
        'commerce/taxZones/save',
        'Tax zone saved.'|t
    ) }}

    {% set taxCategorySelectParams = {
        label: "Tax Category"|t,
        instructions: "Select a tax category."|t,
        id: 'taxCategoryId',
        name: 'taxCategoryId',
        value: taxRate.taxCategoryId,
        errors: taxRate.getErrors('taxCategoryId'),
        required: true,
        options: taxCategories,
        class: 'selectize fullwidth',
    } %}

    {{ lazyCreateSelect(
        taxCategorySelectParams,
        'New tax category'|t,
        'Create a new tax category'|t,
        newTaxCategoryFields,
        newTaxCategoryJs,
        'commerce/taxCategories/save',
        'Tax category saved.'|t
    ) }}

	{{ forms.checkboxField({
		label: "This tax is already included in the taxable subject"|t,
		name: 'include',
		value: 1,
		checked: taxRate.include,
		errors: taxRate.getErrors('include'),
	}) }}

	{{ forms.checkboxField({
		label: "Don’t apply this tax when the shipping address has a valid VAT ID"|t,
		name: 'isVat',
		value: 1,
		checked: taxRate.isVat,
		errors: taxRate.getErrors('isVat'),
		toggle: '#isVat'
	}) }}
	<p id="isVat" {% if not taxRate.isVat %} class="hidden"{% endif %}>
		{{ "This tax rate will not be applied if a valid businessTaxId is entered into the shipping address."|t }}
	</p>

    {% includeJs %}
    (function() {
        window.taxableValue = "{{ taxRate.taxable }}";

        function toggleCategory(val)
        {
            if (val == 'order_total_shipping' || val == 'order_total_price')
            {
                $('#taxCategoryId-field').hide();
            }else{
                $('#taxCategoryId-field').show();
            }
        }

        toggleCategory(window.taxableValue);

        $('#taxable').change(function(e){
            toggleCategory($(this).val());
        });

    })();

    {% endincludejs %}

{% endblock %}

